<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BlankColumnName" xml:space="preserve">
    <value>An attempt was made to define a column with a null or blank name.</value>
  </data>
  <data name="DuplicateColumnName" xml:space="preserve">
    <value>An attempt was made to add a column to a schema where the same name already exists.</value>
  </data>
  <data name="FixedLengthRecordTooShort" xml:space="preserve">
    <value>The record did not meet the length requirements specified in the schema. Record {0}.</value>
  </data>
  <data name="InvalidAlignment" xml:space="preserve">
    <value>Encountered an invalid fixed width column alignment.</value>
  </data>
  <data name="InvalidColumnWidth" xml:space="preserve">
    <value>An attempt was made to define a column with a negative width.</value>
  </data>
  <data name="InvalidRecordFormatNumber" xml:space="preserve">
    <value>Encountered an invalid record format. Record {0}.</value>
  </data>
  <data name="InvalidTruncationPolicy" xml:space="preserve">
    <value>Encountered an invalid overflow truncation policy.</value>
  </data>
  <data name="NoMoreRecords" xml:space="preserve">
    <value>An attempt to view values was made after all of the records were read.</value>
  </data>
  <data name="NotEnumType" xml:space="preserve">
    <value>The type provided is not a an enumeration type.</value>
  </data>
  <data name="ReadingWithErrors" xml:space="preserve">
    <value>An attempt was made to work with a parser after an invalid record was encountered.</value>
  </data>
  <data name="ReadNotCalled" xml:space="preserve">
    <value>An attempt to view values was made before reading the first record.</value>
  </data>
  <data name="WrongNumberOfValues" xml:space="preserve">
    <value>The wrong number of values were passed.</value>
  </data>
  <data name="EmptySeparator" xml:space="preserve">
    <value>The column separator cannot be null or empty.</value>
  </data>
  <data name="EmptyRecordSeparator" xml:space="preserve">
    <value>The record separator cannot be null or empty.</value>
  </data>
  <data name="SameSeparator" xml:space="preserve">
    <value>The column and record separator are the same string.</value>
  </data>
  <data name="SchemaNotDefined" xml:space="preserve">
    <value>An attempt was made to retrieve the schema when none was extracted or provided.</value>
  </data>
  <data name="BadPropertySelector" xml:space="preserve">
    <value>The property selector did not select a property.</value>
  </data>
  <data name="SeparatedValueRecordWrongNumberOfColumns" xml:space="preserve">
    <value>The record did not have the number of columns specified in the schema. Record {0}.</value>
  </data>
  <data name="UnmatchedQuote" xml:space="preserve">
    <value>A syntax error was encountered: Unmatched quote.</value>
  </data>
  <data name="InvalidRecordConversion" xml:space="preserve">
    <value>Encountered an invalid conversion while processing the record. Record {0}.</value>
  </data>
  <data name="InvalidColumnConversion" xml:space="preserve">
    <value>Failed to convert '{0}' to '{1}'. Column: {2}</value>
  </data>
  <data name="WrongPropertyType" xml:space="preserve">
    <value>The actual property type did not match the indicated type.</value>
  </data>
  <data name="NoDefaultConstructor" xml:space="preserve">
    <value>The type you are trying to map does not have a default constructor.</value>
  </data>
  <data name="ReadOnlyProperty" xml:space="preserve">
    <value>Cannot read values into the {0} property because it is read-only.</value>
  </data>
  <data name="WriteOnlyProperty" xml:space="preserve">
    <value>Cannot write values from the {0} property because it is write-only.</value>
  </data>
  <data name="AssignNullToStruct" xml:space="preserve">
    <value>Encountered a null when assigning to the non-nullable property '{0}'.</value>
  </data>
  <data name="SchemaError" xml:space="preserve">
    <value>An error occured while parsing the schema {0}.</value>
  </data>
  <data name="InvalidLengthError" xml:space="preserve">
    <value>The record did not meet the length requirements specified in the schema. Expected length is {0} but actual length is {1}.</value>
  </data>
  <data name="SeparatedValueRecordWrongColumnCount" xml:space="preserve">
    <value>The record did not have the number of columns specified in the schema. Expected column count is {0} but actual column count is {1}.</value>
  </data>
</root>